% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wrappers.R
\name{repair_json}
\alias{repair_json}
\title{Repair Malformed JSON Strings}
\arguments{
\item{json_str}{Character. Raw JSON text.}

\item{return_objects}{Logical. Return R objects if TRUE, or JSON text string}

\item{skip_json_loads}{Logical. Skip the fast attempt via \code{jsonlite::fromJSON}.}

\item{logging}{Logical. If save log.}

\item{file_conn}{Connection. If provided, read JSON from this connection.}

\item{stream_stable}{Logical. Stream-stable parsing mode.}
}
\value{
Either a JSON string (default) or R list/object.
}
\description{
Attempts to parse and repair malformed JSON strings. The function first tries
to parse the JSON using \code{jsonlite::fromJSON}. If that fails, it uses a
custom parser to attempt to repair common JSON formatting issues such as
missing quotes, trailing commas, or unescaped characters. The function can
return either R objects or a properly formatted JSON string.
}
\details{
Repair (Possibly Broken) JSON

Attempts to parse \code{json_str}.
}
\examples{
## 1) Malformed JSON – request the repaired result as an R object
repair_json('{ "key": value, "key2": 1 "key3": null }',
            return_objects = TRUE)
#> $key
#> [1] "value"
#>
#> $key2
#> [1] 1
#>
#> $key3
#> "NULL"

## 2) Valid JSON – default behaviour returns a compact JSON string
repair_json('{"name": "John", "age": 30, "city": "New York"}')
#> {"name":"John","age":30,"city":"New York"}

}
